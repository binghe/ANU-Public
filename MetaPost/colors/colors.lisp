(in-package :cl-user)

;; JSON files are generated by ase2json project (https://github.com/m99coder/ase2json)

(eval-when (:load-toplevel :execute)
  (ql:quickload :cl-json))

(defvar *china*
  (cdar (with-open-file (s "DIC_China.json" :direction :input :external-format :utf-8)
          (let ((cl-json:*json-identifier-name-to-lisp* 'identity)
                (cl-json:*json-symbols-package* nil))
            (json:decode-json s)))))

(defvar *japan*
  (cdar (with-open-file (s "DIC_Japan.json" :direction :input :external-format :utf-8)
          (let ((cl-json:*json-identifier-name-to-lisp* 'identity)
                (cl-json:*json-symbols-package* nil))
            (json:decode-json s)))))

(defvar *france*
  (cdar (with-open-file (s "DIC_France.json" :direction :input :external-format :utf-8)
          (let ((cl-json:*json-identifier-name-to-lisp* 'identity)
                (cl-json:*json-symbols-package* nil))
            (json:decode-json s)))))

;; for test only
(defun extract-names (item)
  (destructuring-bind (name model type rgb code) item
    (let ((names (split-sequence "+- ()*" (symbol-name name))))
      names)))

;; (mapcar #'extract-names *china*)
;; (mapcar #'extract-names *japan*)
;; (mapcar #'extract-names *france*)

(defun extract-china-code (item)
  (destructuring-bind (name model type rgb code) item
    (let ((names (split-sequence "+- ()*" (symbol-name name))))
      (format nil "~A_~A := (~A, ~A, ~A); % ~A"
              (nth 1 names) (nth 2 names)
              (/ (nth 0 (cdr rgb)) 255.0)
              (/ (nth 1 (cdr rgb)) 255.0)
              (/ (nth 2 (cdr rgb)) 255.0)
              (nth 4 names)
              ))))

(defparameter *r1* (mapcar #'extract-china-code *china*))

(defun extract-japan-code (item)
  (destructuring-bind (name model type rgb code) item
    (let ((names (split-sequence "+- ()*" (symbol-name name))))
      (format nil "~A_~A := (~A, ~A, ~A); % ~A"
              (nth 0 names) (nth 1 names)
              (/ (nth 0 (cdr rgb)) 255.0)
              (/ (nth 1 (cdr rgb)) 255.0)
              (/ (nth 2 (cdr rgb)) 255.0)
              (nth 2 names)
              ))))

(defparameter *r2* (mapcar #'extract-japan-code *japan*))

(defun extract-france-name (names)
  (let ((result nil)
        (pos 0))
    (loop for n from 2 below (length names) do
          (if (string/= (nth n names) "")
              (push (nth n names) result)
            (progn (setq pos n) (return))))
    (values (format nil "~{~A ~}" (nreverse result))
            pos)))

(defun extract-france-code (item)
  (destructuring-bind (name model type rgb code) item
    (let ((names (split-sequence "+- ()*" (symbol-name name))))
      (multiple-value-bind (france-name pos)
          (extract-france-name names)
        (format nil "~A_~A := (~A, ~A, ~A); % ~A(~A)"
                (nth 0 names) (nth 1 names)
                (/ (nth 0 (cdr rgb)) 255.0)
                (/ (nth 1 (cdr rgb)) 255.0)
                (/ (nth 2 (cdr rgb)) 255.0)
                france-name (nth (1+ pos) names)
                )))))

(defparameter *r3* (mapcar #'extract-france-code *france*))
